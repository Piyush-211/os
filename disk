#include <iostream>
#include <algorithm>
#include <cmath>

using namespace std;

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
  for (int j = 0; j < n - i - 1; j++) {
 if (arr[j] > arr[j + 1]) {
  swap(arr[j], arr[j + 1]);
        }
        }
    }
}

void SSTF(int req[], int n, int head) {
 int totalMovement = 0;
 bool completed[n] = {false};  
 int nearest, minDist;

for (int i = 0; i < n; i++) {
        minDist = 1e9;
        for (int j = 0; j < n; j++) {
          if (!completed[j] && abs(req[j] - head) < minDist) {
         minDist = abs(req[j] - head);
           nearest = j;
            }
        }
      totalMovement += minDist;
    head = req[nearest];
    completed[nearest] = true;
    }

    cout << "Total Head Movement (SSTF): " << totalMovement << endl;
}


void SCAN(int req[], int n, int head, int diskSize) {
    int totalMovement = 0;

  
    bubbleSort(req, n);

    
    int i = 0;
    while (i < n && req[i] < head) i++;

    
    for (int j = i; j < n; j++) {
        totalMovement += abs(req[j] - head);
        head = req[j];
    }

    
    totalMovement += abs(diskSize - 1 - head);
    head = diskSize - 1;

    
    for (int j = i - 1; j >= 0; j--) {
        totalMovement += abs(req[j] - head);
        head = req[j];
    }

    cout << "Total Head Movement (SCAN): " << totalMovement << endl;
}


void CLOOK(int req[], int n, int head) {
    int totalMovement = 0;

     bubbleSort(req, n);

    int i = 0;
    while (i < n && req[i] < head) i++;

    for (int j = i; j < n; j++) {
        totalMovement += abs(req[j] - head);
        head = req[j];
    }

    for (int j = 0; j < i; j++) {
        totalMovement += abs(req[j] - head);
        head = req[j];
    }

    cout << "Total Head Movement (C-LOOK): " << totalMovement << endl;
}

int main() {
    int n, head, diskSize;
    cout << "Enter the number of requests: ";
    cin >> n;
    int req[n];

    
    cout << "Enter the requests: ";
    for (int i = 0; i < n; i++) {
        cin >> req[i];
    }

    cout << "Enter initial head position: ";
    cin >> head;

    cout << "Enter disk size: ";
    cin >> diskSize;

    SSTF(req, n, head); 
    SCAN(req, n, head, diskSize); 
    CLOOK(req, n, head); 

    return 0;
}
