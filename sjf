# include <iostream>
  #include <climits>
using namespace std;

struct process{
    int pid;
    int at;
    int bt;


};


void calAT(process proc[],int wt[],int n){

    int rt[n];

    for(int i=0;i<n;i++)
    rt[i]=proc[i].bt;

    int complete=0,t=0,minm=INT_MAX;
    int shortest=0,ct;
    bool check=false;

    while(complete!=n){
       for(int j=0;j<n;j++){
       if (proc[j].at<t && rt[j]<minm && rt[j]>0){
        minm=rt[j];
        shortest=j;
        check=true;
       }

       }
       if (check == false) {
            t++;
            continue;
        }

   

     rt[shortest]--;


     minm=rt[shortest];
     if (minm==0)
     minm=INT_MAX;

     if(rt[shortest]==0){

        complete ++;
        check=false;

        ct=t+1;

        wt[shortest]= ct-proc[shortest].at-proc[shortest].bt;

        if(wt[shortest]<0)
            wt[shortest]=0;
        
     }
   t++;
    }

}

void caltat(process proc[],int wt[],int n,int tat[] ){
    for(int i=0;i<n;i++)
    tat[i]=proc[i].bt+ wt[i];
    
}

void findavgTime(process proc[], int n) {
    int wt[n], tat[n], total_wt = 0, total_tat = 0;

    // Function to find waiting time of all processes
    calAT(proc,  wt,n);

    // Function to find turnaround time for all processes
    caltat(proc,  wt,n, tat);

    cout << "P\tBT\tAT\tWT\tTAT\n";

    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
        cout << proc[i].pid << "\t" << proc[i].bt << "\t" << proc[i].at << "\t"
              << wt[i] << "\t" << tat[i] << endl;
    }

      cout<< "Average waiting time = " << (float)total_wt / (float)n;
      cout<< "Average turnaround time = " << (float)total_tat / (float)n;
}




int main(){
    int pid,at,bt;
    int n;
    cout<<"Enter the number of the process "<<endl;
    cin>>n;

    process proc[n];
      for (int i=0;i<n;i++){
      cout<<"enter the pid,arrival time and burst time for "<<i+1<<"process"<<endl;
      cin>>proc[i].pid>>proc[i].at>>proc[i].bt;

}
    findavgTime(proc, n);

    return 0;
}
